{"version":3,"sources":["../src/pixel-flow.js","scripts/index.mjs"],"names":["evenNum","num","NaN","convPerc","percentage","Number","replace","PixelFlow","defaultOptions","resolution","offsetX","offsetY","img","options","HTMLImageElement","window","console","error","Object","assign","setUpCanvas","drawPixels","parentNode","replaceChild","canvas","err","build","opts","prototype","drawCol","left","colWidth","pixHeight","w","row","y","pixelX","pixelIndex","width","h","height","res","resH","offestX","rows","x","Math","max","min","drawPixel","ctx","imgData","red","green","blue","pixelAlpha","fillStyle","fillRect","col","pixelY","size","cols","halfSize","rebase","linearGradient","location","Array","isArray","length","startRes","endRes","startPoint","gradStart","gradEnd","endPoint","addColRange","arr","leftStart","startWidth","endWidth","rightEnd","place","push","Rl","Rs","t","cWidth","c","drawImage","document","createElement","getContext","_copyCanvas","_copyCtx","className","id","naturalWidth","naturalHeight","getImageData","data","clearRect","simpleanimate","endResolution","duration","er","startTime","Date","now","PixelFlowAnimationLoop","time","update","requestAnimationFrame","bind","domReady","Promise","resolve","readyState","readystate","then","addEventListener","waitForImage","reject","imgObj","Image","onload","onerror","src","runAnimation","tick","start","ticker","completionRatio","easeOutQuad","easeInOutQuad","ratio","runGradientAnimation","pixelFlow","startOffsetX","ratioComplete","round","runWaveAnimation","optionsLeft","optionsRight","offsetMultiplier","abs","pixelFlows","transformOptions","lg","wg","images","from","querySelectorAll","all","map","imageWrappers","i","imgWrap","getElementsByTagName","forEach","b","index","event","button","target","requestedTransform","dataset","func","buttonListener"],"mappings":";AASA,aAGA,SAASA,EAAQC,GACX,MAAe,iBAARA,EAAyBC,MAC3BD,IAASA,EAAM,EAG1B,SAASE,EAASC,GACTC,OAAAA,OAAOD,EAAWE,QAAQ,SAAU,KAAO,IAiZrCC,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA9Yf,IAAIC,EAAiB,CACnBC,WAAY,GACZC,QAAS,EACTC,QAAS,GAOX,SAASJ,EAAUK,EAAKC,GAClB,KAAED,aAAeE,kBACnB,OACEC,OAAOC,SACPA,QAAQC,MAAM,oDAGbJ,KAAAA,QAAUK,OAAOC,OAAO,GAAIX,EAAgBK,GAE5CD,KAAAA,IAAMA,EAEP,IACGQ,KAAAA,YAAYR,GAEZS,KAAAA,aAGLT,EAAIU,WAAWC,aAAa,KAAKC,OAAQZ,GACzC,MAAOa,GACPV,OAAOC,SAAWA,QAAQC,MAAM,uCAChCF,OAAOC,SAAWA,QAAQC,MAAMQ,IAUpClB,EAAUmB,MAAQ,SAASd,EAAKe,GACvB,OAAA,IAAIpB,EAAUK,EAAKe,IAU5BpB,EAAUqB,UAAUC,QAAU,SAASC,EAAMC,EAAUC,GACjDD,KAAAA,GAAY,GAAKC,GAAa,GAC9BF,EAAOC,EAAW,GAAlBD,CAEAG,IASAC,EAEAC,EAEAC,EACAC,EAdAJ,EAAI,KAAKK,MACTC,EAAI,KAAKC,OACT3B,EAAU,KAAKA,QACf4B,EAAMV,EACNW,EAAOV,GAAaS,EAEpB9B,GADUE,EAAQ8B,QACR9B,EAAQF,SAClBiC,EAAOL,EAAIG,EAAO,EAGlBG,EAAIf,GAAQ,EAOZe,KAAAA,EAAIJ,GAAO,GAAKI,GAAKZ,GAIpBC,IAFLE,EAASU,KAAKC,IAAID,KAAKE,IAAIH,EAAGZ,EAAI,GAAI,GAEjCC,EAAM,EAAGA,EAAMU,EAAMV,IACxBC,GAAKD,EAAM,IAAOQ,EAAO/B,EAIzB0B,EAAqC,GAAvBD,EAFLU,KAAKC,IAAID,KAAKE,IAAIb,EAAGI,EAAI,GAAI,GAENN,GAE3BgB,KAAAA,UAAUZ,EAAYQ,EAAGV,EAAGM,EAAKC,KAa1CnC,EAAUqB,UAAUqB,UAAY,SAASZ,EAAYQ,EAAGV,EAAGF,EAAGM,GACxDW,IAAAA,EAAM,KAAKA,IACbC,EAAU,KAAKA,QACfC,EAAMD,EAAQd,GACdgB,EAAQF,EAAQd,EAAa,GAC7BiB,EAAOH,EAAQd,EAAa,GAE5BkB,EAAsBJ,EAAQd,EAAa,GAAK,IADxC,EAUH,OANPa,EAAIM,UACF,QAAUJ,EAAM,IAAMC,EAAQ,IAAMC,EAAO,IAAMC,EAAa,IAGhEL,EAAIO,SAASZ,EAAGV,EAAGF,EAAGM,GAEf,MAQThC,EAAUqB,UAAUP,WAAa,SAASR,GAExCA,EAAUK,OAAOC,OAAO,KAAKN,QAASA,GAClCoB,IAeAC,EAAKwB,EAAKb,EAAGV,EAAGwB,EAAgBtB,EAAYe,EAAKC,EAAOC,EAAMC,EAf9DtB,EAAI,KAAKK,MACXC,EAAI,KAAKC,OACTU,EAAM,KAAKA,IACXC,EAAU,KAAKA,QACfV,EAAM5B,EAAQJ,WACdmD,EAAO/C,EAAQ+C,MAAQnB,EAEvB/B,EAAUG,EAAQH,QAClBC,EAAUE,EAAQF,QAClBkD,EAAO5B,EAAIQ,EAAM,EACjBG,EAAOL,EAAIE,EAAM,EACjBqB,EAAWF,EAAO,EAEhBnB,GAAAA,EAAM,EAAG,OAAO,KAAKsB,SAIpB7B,IAAAA,EAAM,EAAGA,EAAMU,EAAMV,IAKnBwB,IAJLvB,GAAKD,EAAM,IAAOO,EAAM9B,EAExBgD,EAASb,KAAKC,IAAID,KAAKE,IAAIb,EAAGI,EAAI,GAAI,GAEjCmB,EAAM,EAAGA,EAAMG,EAAMH,IACxBb,GAAKa,EAAM,IAAOjB,EAAM/B,EAIxB0C,EAAMD,GADNd,EAAqC,GAD5BS,KAAKC,IAAID,KAAKE,IAAIH,EAAGZ,EAAI,GAAI,GACf0B,EAAS1B,IACL,GAC3BoB,EAAQF,EAAQd,EAAa,GAC7BiB,EAAOH,EAAQd,EAAa,GAC5BkB,EAAsBJ,EAAQd,EAAa,GAAK,IAxB1C,EA0BNa,EAAIM,UACF,QAAUJ,EAAM,IAAMC,EAAQ,IAAMC,EAAO,IAAMC,EAAa,IAGhEL,EAAIO,SAASZ,EAAIiB,EAAU3B,EAAI2B,EAAUF,EAAMA,GAI5C,OAAA,MAkBTrD,EAAUqB,UAAUoC,eAAiB,SAASnD,GAc1C,IAZFA,EAAUK,OAAOC,OACf,GACA,KAAKN,QACL,CAAEoD,SAAU,CAAC,EAAG,IAAM,IAAM,GAAIxD,WAAY,CAAC,GAAI,GAAIsD,QAAQ,GAC7DlD,IAGUkD,QAAQ,KAAKA,SAEpBlD,KAAAA,QAAUA,GAGZqD,MAAMC,QAAQtD,EAAQoD,YACtBC,MAAMC,QAAQtD,EAAQJ,aACvBI,EAAQoD,SAASG,OAAS,GAC1BvD,EAAQJ,WAAW2D,OAAS,EAMrB,OAJPrD,OAAOC,SACLA,QAAQC,MACN,sEAEG,KAGLoD,IAAAA,EAAWrE,EAAQa,EAAQJ,WAAW,IACxC6D,EAAStE,EAAQa,EAAQJ,WAAW,IACpC8D,EAAa1D,EAAQoD,SAAS,IAAM,EACpCO,EAAY3D,EAAQoD,SAAS,IAAM,IACnCQ,EAAU5D,EAAQoD,SAAS,IAAM,IACjCS,EAAW7D,EAAQoD,SAAS,IAAM,EAClCvD,EAAUG,EAAQH,SAAW,KAAKA,SAAW,EAErB,iBAAf6D,IAAyBA,EAAapE,EAASoE,IACjC,iBAAdC,IAAwBA,EAAYrE,EAASqE,IACjC,iBAAZC,IAAsBA,EAAUtE,EAASsE,IAC5B,iBAAbC,IAAuBA,EAAWvE,EAASuE,IAGlDzC,IAAAA,EAAI,KAAKK,MAGbiC,GAActC,EACduC,GAAavC,EACbwC,GAAWxC,EACXyC,GAAYzC,EAER4B,IAAAA,EAAO,GASFc,SAAAA,EAAYC,EAAKC,EAAWC,EAAYC,EAAUC,GACrDA,KAAAA,EAAWH,GAEXC,GAAAA,IAAeC,EAAU,CACvBD,GAAe,IAAfA,EAAkB,OAGfG,IADHA,IAAAA,EAAQJ,EACLI,GAASD,GACdC,GAASH,EACTjB,EAAKqB,KAAKlF,EAAQiF,QAEf,CACDE,IAAAA,EAAKL,GAAc,EACnBM,EAAKL,GAAY,EACjBM,EAAIL,EAAWH,EAOfS,GADAL,EAAQJ,EACCC,GAGV,GAKDG,GAASjF,EADTsF,EADMH,GAAmBF,EAAQJ,GAAaQ,GAAlCF,EAAKC,IAGjBvB,EAAKqB,KAAKlF,EAAQiF,UACXA,GAASD,GAAYM,GAAU,IAvCxCjB,EAAW,GAAGR,EAAKqB,KAAKlF,EAAQuE,IA2CpCI,EAAYd,EAAMU,EAAYF,EAAUA,EAAUG,GAClDG,EACEd,EACAA,EAAKA,EAAKO,OAAS,IAAMI,EACzBH,EACAC,EACAG,GAEFE,EAAYd,EAAMA,EAAKA,EAAKO,OAAS,GAAIE,EAAQA,EAAQI,GAEpD,IAAA,IAAIa,EAAI,EAAGA,EAAI1B,EAAKO,OAAQmB,IAC1B1D,KAAAA,QAAQgC,EAAK0B,EAAI,GAAK7E,EAASmD,EAAK0B,GAAK1B,EAAK0B,EAAI,IAGlD,OAAA,MAOThF,EAAUqB,UAAUmC,OAAS,WASpB,OARFlD,KAAAA,QAAU,CACbJ,WAAY,EACZC,QAAS,EACTC,QAAS,GAGNuC,KAAAA,IAAIsC,UAAU,KAAK5E,IAAK,EAAG,GAEzB,MASTL,EAAUqB,UAAUR,YAAc,SAASR,GAErCY,IAAAA,EAAU,KAAKA,OAASiE,SAASC,cAAc,UAC9CxC,KAAAA,IAAM1B,EAAOmE,WAAW,MAGxBC,KAAAA,YAAcH,SAASC,cAAc,UACrCG,KAAAA,SAAW,KAAKD,YAAYD,WAAW,MAG5CnE,EAAOsE,UAAYlF,EAAIkF,UACvBtE,EAAOuE,GAAKnF,EAAImF,GAEZ9D,IAAAA,EAAK,KAAKK,MAAQ,KAAKd,OAAOc,MAAQ,KAAKsD,YAAYtD,MACzD1B,EAAIoF,aAAe,GAAM,EAAIpF,EAAIoF,aAAepF,EAAIoF,aAAe,EACjEzD,EAAK,KAAKC,OAAS,KAAKhB,OAAOgB,OAAS,KAAKoD,YAAYpD,OAC3D5B,EAAIqF,cAAgB,GAAM,EAAIrF,EAAIqF,cAAgBrF,EAAIqF,cAAgB,EAUjE,OAPF/C,KAAAA,IAAIsC,UAAU5E,EAAK,EAAG,GACtBiF,KAAAA,SAASL,UAAU5E,EAAK,EAAG,GAE3BuC,KAAAA,QAAU,KAAK0C,SAASK,aAAa,EAAG,EAAGjE,EAAGM,GAAG4D,KAEjDjD,KAAAA,IAAIkD,UAAU,EAAG,EAAGnE,EAAGM,GAErB,MAQThC,EAAUqB,UAAUyE,cAAgB,SAASC,EAAeC,GACtDC,IAAAA,EAAKxG,EAAQsG,GAEb,GAAA,KAAKzF,QAAQJ,aAAe+F,EAA5B,CACAnC,IAAAA,EAAW,KAAKxD,QAAQJ,WACxBgC,EAAM4B,EACNoC,EAAYC,KAAKC,MAIjBC,EAAyB,WACvBC,IAAAA,EAAOH,KAAKC,OAIhBlE,EAAMzC,EAFNyC,EAAM4B,GAA+BwC,EAAOJ,GAAaF,GAAvCC,EAAKnC,MAIZ,EAGL,KAAKxD,QAAQJ,aAAegC,GACzBqE,KAAAA,OAAO,CAAErG,WAAYT,EAAQyC,KAG/BsB,KAAAA,OAAO,KAGTyC,EAAKnC,GAAY5B,EAAM+D,GAAQA,EAAKnC,GAAY5B,EAAM+D,IACzDzF,OAAOgG,sBAAsBH,IAE/BI,KAAK,MAIA,OAFPjG,OAAOgG,sBAAsBH,GAEtB,OAQTrG,EAAUqB,UAAUkF,OAAS,SAASjG,GAO7B,OANPK,OAAOC,OAAO,KAAKN,QAASA,GAEvBA,KAAAA,QAAQJ,WAAaT,EAAQ,KAAKa,QAAQJ,YAE1CY,KAAAA,aAEE,MAGMd,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;AC1Vf,aAzEA,IAAA,EAAA,EAAA,QAAA,4BAyEA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wDAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAvEA,SAAS0G,IACA,OAAA,IAAIC,QAAQ,SAAAC,GAES,gBAAxB1B,SAAS2B,YACe,cAAxB3B,SAAS4B,WAETH,QAAQC,UAAUG,KAAKH,GAEvB1B,SAAS8B,iBAAiB,mBAAoB,WAAMJ,OAAAA,QAK1D,SAASK,EAAa5G,GACb,OAAA,IAAIsG,QAAQ,SAASC,EAASM,GAC/BC,IAAAA,EAAS,IAAIC,MACjBD,EAAOE,OAAS,WACdT,EAAQvG,IAEV8G,EAAOG,QAAU,WACfJ,KAEFC,EAAOI,IAAMlH,EAAIkH,MAIrB,SAASC,EAAaC,EAAMzB,GAC1BA,GAAsB,IAChB0B,IAAAA,EAAQvB,KAAKC,MAWnB5F,OAAOgG,sBAVEmB,SAAAA,IACDvB,IACAwB,GADMzB,KAAKC,MACcsB,GAAS1B,EACpC4B,GAAmB,EACrBH,EAAK,IAELA,EAAKG,GACLpH,OAAOgG,sBAAsBmB,MAMnC,SAASE,EAAY/C,GACZA,OAAAA,GAAK,EAAIA,GAGlB,SAASgD,EAAcC,GACdA,OAAAA,EAAQ,GAAM,EAAIA,EAAQA,GAAc,EAAI,EAAIA,GAASA,EAAtB,EAG5C,SAASC,EAAqBC,EAAW3H,GACjC4H,IAAAA,EAAeD,EAAUlG,MAC/ByF,EAAa,SAAAW,GACLhI,IAAAA,EAAUoC,KAAK6F,MACnBF,EAAeA,EAAeL,EAAYM,IAE5CF,EAAUxE,eAAe9C,OAAOC,OAAO,CAAET,QAAAA,GAAWG,KACnD,GAIL,SAAS+H,EAAiBJ,EAAwC,GAAA,IAAA,EAAA,EAAA,EAAA,GAA5BK,EAA4B,EAAA,GAAfC,EAAe,EAAA,GAC1DxG,EAAQkG,EAAUlG,MACxByF,EAAa,SAAAW,GACLK,IAAAA,GAAoBV,EAA8C,EAAhCvF,KAAKkG,IAAIN,EAAgB,KAC3DhI,EAAUoC,KAAK6F,MAAMrG,EAAQyG,GACnCP,EAAUxE,eAAe9C,OAAOC,OAAO,CAAET,QAAAA,GAAWmI,IACpDL,EAAUxE,eAAe9C,OAAOC,OAAO,CAAET,QAAAA,GAAWoI,KACnD,IAGH,WACIG,IAAAA,EACAC,EAAmB,CACrB,CACElF,eAAgB,CAAEC,SAAU,CAAC,EAAG,EAAG,IAAM,GAAIxD,WAAY,CAAC,GAAI,IAC9DY,WAAY,CAAEZ,WAAY,GAAIE,QAAS,GACvCwI,GAAI,CAAElF,SAAU,EAAE,EAAG,EAAG,IAAM,IAC9BmF,GAAI,CACF,CAAEnF,SAAU,CAAC,IAAM,GAAK,EAAG,GAAIxD,WAAY,CAAC,GAAI,IAChD,CAAEwD,SAAU,CAAC,GAAK,GAAK,IAAM,KAAOxD,WAAY,CAAC,EAAG,IAAKsD,QAAQ,KAGrE,CACEC,eAAgB,CAAEC,SAAU,CAAC,EAAG,GAAK,GAAK,GAAIxD,WAAY,CAAC,GAAI,IAC/DY,WAAY,CAAEZ,WAAY,GAC1B0I,GAAI,CAAElF,SAAU,EAAE,EAAG,GAAK,IAAM,IAChCmF,GAAI,CACF,CAAEnF,SAAU,CAAC,IAAM,GAAK,EAAG,GAAIxD,WAAY,CAAC,GAAI,IAChD,CAAEwD,SAAU,CAAC,GAAK,GAAK,IAAM,KAAOxD,WAAY,CAAC,EAAG,IAAKsD,QAAQ,KAGrE,CACEC,eAAgB,CAAEC,SAAU,CAAC,EAAG,EAAG,IAAM,GAAIxD,WAAY,CAAC,GAAI,IAC9DY,WAAY,CAAEZ,WAAY,GAC1B0I,GAAI,CAAElF,SAAU,EAAE,EAAG,EAAG,IAAM,IAC9BmF,GAAI,CACF,CAAEnF,SAAU,CAAC,IAAM,GAAK,EAAG,GAAIxD,WAAY,CAAC,GAAI,IAChD,CAAEwD,SAAU,CAAC,GAAK,GAAK,IAAM,KAAOxD,WAAY,CAAC,EAAG,IAAKsD,QAAQ,KAGrE,CACEC,eAAgB,CAAEC,SAAU,CAAC,EAAG,GAAK,GAAK,GAAIxD,WAAY,CAAC,EAAG,KAC9DY,WAAY,CAAEZ,WAAY,IAC1B0I,GAAI,CAAElF,SAAU,CAAC,EAAG,GAAK,GAAK,GAAIxD,WAAY,CAAC,EAAG,KAClD2I,GAAI,CACF,CAAEnF,SAAU,CAAC,IAAM,GAAK,EAAG,GAAIxD,WAAY,CAAC,GAAI,IAChD,CAAEwD,SAAU,CAAC,GAAK,GAAK,IAAM,KAAOxD,WAAY,CAAC,EAAG,IAAKsD,QAAQ,MA0BvEkD,IACGK,KAAK,WACA+B,IAAAA,EAASnF,MAAMoF,KAAK7D,SAAS8D,iBAAiB,qBAC3CrC,OAAAA,QAAQsC,IAAIH,EAAOI,IAAIjC,MAE/BF,KAAK,SAAA+B,GACJJ,EAAaI,EAAOI,IAAI,SAAA7I,GAAO,OAAA,IAAIL,EAAJ,QAAcK,EAAK,CAAEH,WAAY,OAK3D,IAHCiJ,IAAAA,EAAgBxF,MAAMoF,KAC1B7D,SAAS8D,iBAAiB,iBAEnBI,EAAAA,SAAAA,GACWV,EAAWU,GAAvBnB,IACAoB,EAAUF,EAAcC,GACdzF,MAAMoF,KAAKM,EAAQC,qBAAqB,WAChDC,QAAQ,SAAAC,GACdA,OAAAA,EAAExC,iBAAiB,SArCHyC,EAqC2BL,EApC1C,SAAAM,GACCC,IAAAA,EAASD,EAAME,OACf3B,EAAYS,EAAWe,GACvBI,EAAqBF,EAAOG,QAAQC,KAEf,oBAAvBF,EACF7B,EAAqBC,EAAWU,EAAiBc,GAAOb,IACxB,yBAAvBiB,EACTxB,EAAiBJ,EAAWU,EAAiBc,GAAOZ,IAEpDZ,EAAU4B,GACRlJ,OAAOC,OACL,CAAET,QAAS,GACXwI,EAAiBc,GAAOI,IAAuB,QAuBF,GArC9CG,IAAeP,KAgCXL,EAAI,EAAGA,EAAIV,EAAW7E,OAAQuF,IAA9BA,EAAAA,KAzEb","file":"scripts.f8009d26.map","sourceRoot":"../public","sourcesContent":["/*\n ** https://github.com/JamesNimlos/pixel-flow\n **\n ** Developed by\n ** - James Nimlos\n **\n ** Licensed under MIT license\n */\n\n'use strict'\n\n// utility functions\nfunction evenNum(num) {\n  if (typeof num !== 'number') return NaN\n  return ~~num - (~~num % 2)\n}\n\nfunction convPerc(percentage) {\n  return Number(percentage.replace(/[\\s%]/g, '')) / 100\n}\n\nvar defaultOptions = {\n  resolution: 16,\n  offsetX: 0,\n  offsetY: 0\n}\n\n/**\n * @param {HTMLImageElement} img\n * @param {Object} [options]\n */\nfunction PixelFlow(img, options) {\n  if (!(img instanceof HTMLImageElement))\n    return (\n      window.console &&\n      console.error('The provided element is not an HTMLImageElement.')\n    )\n\n  this.options = Object.assign({}, defaultOptions, options)\n\n  this.img = img\n\n  try {\n    this.setUpCanvas(img)\n\n    this.drawPixels()\n\n    // replace image with canvas\n    img.parentNode.replaceChild(this.canvas, img)\n  } catch (err) {\n    window.console && console.error('PixelFlow could not not be created.')\n    window.console && console.error(err)\n  }\n}\n\n/**\n * Factory function\n * @param  {HTMLImageElement} img\n * @param  {Object} opts\n * @return {PixelFlow}\n */\nPixelFlow.build = function(img, opts) {\n  return new PixelFlow(img, opts)\n}\n\n/**\n * Draws a full column on the canvas\n * @param  {number} left - pixel location of left side of column\n * @param  {number} colWidth - width of the column being drawn in pixels\n * @param  {number} [pixHeight] - height of each 'pixel' being drawn\n * @return {void}\n */\nPixelFlow.prototype.drawCol = function(left, colWidth, pixHeight) {\n  if (colWidth <= 2 || pixHeight <= 2) return\n  if (left + colWidth < 0) return\n  //local variables\n  var w = this.width\n  var h = this.height\n  var options = this.options\n  var res = colWidth\n  var resH = pixHeight || res\n  var offsetX = options.offestX\n  var offsetY = options.offsetY\n  var rows = h / resH + 1\n\n  var row\n  var x = left || 0\n  var y\n  var pixelY\n  var pixelX\n  var pixelIndex\n\n  // skip if outside canvas\n  if (x + res <= 0 || x >= w) return\n  // normalize x so shapes around edges get color\n  pixelX = Math.max(Math.min(x, w - 1), 0)\n\n  for (row = 0; row < rows; row++) {\n    y = (row - 0.5) * resH + offsetY\n    // normalize y so shapes around edges get color\n    pixelY = Math.max(Math.min(y, h - 1), 0)\n\n    pixelIndex = (pixelX + pixelY * w) * 4\n\n    this.drawPixel(pixelIndex, x, y, res, resH)\n  }\n}\n\n/**\n * Draws an individual block or 'pixel' on the canvas\n * @param  {number} pixelIndex - index of the pixel from the image data\n * @param  {number} x - horizontal position of the 'pixel' from left edge being 0\n * @param  {number} y - vertical position of the top left corner of the 'pixel'\n * @param  {number} w - width of the 'pixel'\n * @param  {number} h - height of the 'pixel'\n * @return {PixelFlow}\n */\nPixelFlow.prototype.drawPixel = function(pixelIndex, x, y, w, h) {\n  var ctx = this.ctx,\n    imgData = this.imgData,\n    red = imgData[pixelIndex],\n    green = imgData[pixelIndex + 1],\n    blue = imgData[pixelIndex + 2],\n    alpha = 1,\n    pixelAlpha = alpha * (imgData[pixelIndex + 3] / 255)\n\n  // sets the color using pixelIndex reference for the 'pixel'\n  ctx.fillStyle =\n    'rgba(' + red + ',' + green + ',' + blue + ',' + pixelAlpha + ')'\n\n  // draws pixel\n  ctx.fillRect(x, y, w, h)\n\n  return this\n}\n\n/**\n * Draws the entire pixelation using the current settings on the\n * PixelFlow instance. 'Pixel' size is constant throughout.\n * @return {PixelFlow}\n */\nPixelFlow.prototype.drawPixels = function(options) {\n  //local variables\n  options = Object.assign(this.options, options)\n  var w = this.width,\n    h = this.height,\n    ctx = this.ctx,\n    imgData = this.imgData,\n    res = options.resolution,\n    size = options.size || res,\n    alpha = 1,\n    offsetX = options.offsetX,\n    offsetY = options.offsetY,\n    cols = w / res + 1,\n    rows = h / res + 1,\n    halfSize = size / 2\n\n  if (res < 4) return this.rebase()\n\n  var row, col, x, y, pixelY, pixelX, pixelIndex, red, green, blue, pixelAlpha\n\n  for (row = 0; row < rows; row++) {\n    y = (row - 0.5) * res + offsetY\n    // normalize y so shapes around edges get color\n    pixelY = Math.max(Math.min(y, h - 1), 0)\n\n    for (col = 0; col < cols; col++) {\n      x = (col - 0.5) * res + offsetX\n      // normalize y so shapes around edges get color\n      pixelX = Math.max(Math.min(x, w - 1), 0)\n      pixelIndex = (pixelX + pixelY * w) * 4\n      red = imgData[pixelIndex + 0]\n      green = imgData[pixelIndex + 1]\n      blue = imgData[pixelIndex + 2]\n      pixelAlpha = alpha * (imgData[pixelIndex + 3] / 255)\n\n      ctx.fillStyle =\n        'rgba(' + red + ',' + green + ',' + blue + ',' + pixelAlpha + ')'\n\n      // square\n      ctx.fillRect(x - halfSize, y - halfSize, size, size)\n    } // col\n  } // row\n\n  return this\n}\n\n/**\n * Draws a linear, vertical gradient using the provided options\n * Example options object:\n * var options = {\n * \t\tresolution : [ 32, 0 ],\n * \t\tlocation : [ 0, 0.25, 0.75, 1]\n * }\n * This will generate a gradient that starts at size 32 pixels on the left\n * and will be that size until 25% of the way through the image, then it will\n * begin decreasing linearly until it should be normal resolution\n * (anything less than 4) at or just after 75% of the way throught the image.\n *\n * @param  {Object} options\n * @return {PixelFlow}\n */\nPixelFlow.prototype.linearGradient = function(options) {\n  // TODO: create a better default system.\n  options = Object.assign(\n    {},\n    this.options,\n    { location: [0, 0.25, 0.75, 1], resolution: [32, 0], rebase: true },\n    options\n  )\n\n  if (options.rebase) this.rebase()\n  // needs to wait until after a rebase\n  this.options = options\n\n  if (\n    !Array.isArray(options.location) ||\n    !Array.isArray(options.resolution) ||\n    options.location.length < 4 ||\n    options.resolution.length < 2\n  ) {\n    window.console &&\n      console.error(\n        'You have not provided the necessary options for a linear gradient.'\n      )\n    return this\n  }\n\n  var startRes = evenNum(options.resolution[0]),\n    endRes = evenNum(options.resolution[1]),\n    startPoint = options.location[0] || 0,\n    gradStart = options.location[1] || 0.25,\n    gradEnd = options.location[2] || 0.75,\n    endPoint = options.location[3] || 1,\n    offsetX = options.offsetX || this.offsetX || 0\n\n  if (typeof startPoint === 'string') startPoint = convPerc(startPoint)\n  if (typeof gradStart === 'string') gradStart = convPerc(gradStart)\n  if (typeof gradEnd === 'string') gradEnd = convPerc(gradEnd)\n  if (typeof endPoint === 'string') endPoint = convPerc(endPoint)\n\n  // calculate cols\n  var w = this.width\n\n  // points to pixels\n  startPoint *= w\n  gradStart *= w\n  gradEnd *= w\n  endPoint *= w\n\n  var cols = []\n  if (startRes > 0) cols.push(evenNum(startPoint))\n\n  // modify start points for best spacing\n  // gradStart -= (gradStart - startPoint) % startRes;\n  // gradEnd += endRes - (( endPoint - gradEnd ) % (endRes || 1));\n\n  // TODO: change this to a factory which could return an addColRange function\n  // using one of the different types between linear, exponential, bezier\n  function addColRange(arr, leftStart, startWidth, endWidth, rightEnd) {\n    if (rightEnd < leftStart) return\n\n    if (startWidth === endWidth) {\n      if (startWidth === 0) return\n\n      var place = leftStart\n      while (place <= rightEnd) {\n        place += startWidth\n        cols.push(evenNum(place)) // sub even pixels negatively affects presentation\n      }\n    } else {\n      var Rl = startWidth || 4 // in case resolution is zero\n      var Rs = endWidth || 4\n      var t = rightEnd - leftStart\n      // var mx = ( t / Rl );\n      // var mi = ( t / Rs );\n\n      // var mc = Math.floor( ( mx + mi ) / 2 );\n      // var s = 2 * ( t - ( mc * Rs ) ) / ( mc * ( mc + 1 ) );\n      var place = leftStart\n      var cWidth = startWidth\n      var exp\n\n      do {\n        // linear regression relationship but could be changed\n        // TODO: bezier curve regression\n        exp = Rl - (Rl - Rs) * ((place - leftStart) / t)\n        cWidth = exp\n        place += evenNum(cWidth)\n        cols.push(evenNum(place))\n      } while (place <= rightEnd && cWidth >= 2)\n    }\n  }\n  //calc cols from gradStart to startPoint\n  addColRange(cols, startPoint, startRes, startRes, gradStart)\n  addColRange(\n    cols,\n    cols[cols.length - 1] || gradStart,\n    startRes,\n    endRes,\n    gradEnd\n  )\n  addColRange(cols, cols[cols.length - 1], endRes, endRes, endPoint)\n\n  for (var c = 1; c < cols.length; c++) {\n    this.drawCol(cols[c - 1] + offsetX, cols[c] - cols[c - 1])\n  }\n\n  return this\n}\n\n/**\n * Returns the canvas to display the original image\n * @return {PixelFlow}\n */\nPixelFlow.prototype.rebase = function() {\n  this.options = {\n    resolution: 0,\n    offsetX: 0,\n    offsetY: 0\n  }\n\n  this.ctx.drawImage(this.img, 0, 0)\n\n  return this\n}\n\n/**\n * creates the canvas element and copies the image onto it\n * also creates a back-up canvas\n * @param {HTMLImageElement} img\n * @return {PixelFlow}\n */\nPixelFlow.prototype.setUpCanvas = function(img) {\n  // create canvas\n  var canvas = (this.canvas = document.createElement('canvas'))\n  this.ctx = canvas.getContext('2d')\n\n  //make virtual duplicate for safe keeping of picture data\n  this._copyCanvas = document.createElement('canvas')\n  this._copyCtx = this._copyCanvas.getContext('2d')\n\n  // copy basic attributes from img to canvas\n  canvas.className = img.className\n  canvas.id = img.id\n\n  var w = (this.width = this.canvas.width = this._copyCanvas.width =\n    img.naturalWidth % 2 === 0 ? img.naturalWidth : img.naturalWidth - 1)\n  var h = (this.height = this.canvas.height = this._copyCanvas.height =\n    img.naturalHeight % 2 === 0 ? img.naturalHeight : img.naturalHeight - 1)\n\n  // draw on both canvases\n  this.ctx.drawImage(img, 0, 0)\n  this._copyCtx.drawImage(img, 0, 0)\n\n  this.imgData = this._copyCtx.getImageData(0, 0, w, h).data\n\n  this.ctx.clearRect(0, 0, w, h)\n\n  return this\n}\n\n/**\n * @param  {number} endResolution - resolution to stop the animation at\n * @param  {number} duration - length of the animation\n * @return {PixelFlow}\n */\nPixelFlow.prototype.simpleanimate = function(endResolution, duration) {\n  var er = evenNum(endResolution)\n  // if end resolution is the same as the start then exit\n  if (this.options.resolution === er) return\n  var startRes = this.options.resolution\n  var res = startRes\n  var startTime = Date.now()\n  var elapsed = 0\n  var dur = duration\n\n  var PixelFlowAnimationLoop = function() {\n    var time = Date.now()\n\n    res = startRes + (er - startRes) * ((time - startTime) / duration)\n\n    res = evenNum(res)\n\n    if (res >= 2) {\n      // since we only run for even numbers this happens\n      // during long animations\n      if (this.options.resolution !== res) {\n        this.update({ resolution: evenNum(res) })\n      }\n    } else {\n      this.rebase({})\n    }\n\n    if ((er > startRes && res < er) || (er < startRes && res > er)) {\n      window.requestAnimationFrame(PixelFlowAnimationLoop)\n    }\n  }.bind(this)\n\n  window.requestAnimationFrame(PixelFlowAnimationLoop)\n\n  return this\n}\n\n/**\n * updates the canvas with the new options for resolution\n * @param  {Object} options - options to update the canvas with\n * @return {PixelFlow}\n */\nPixelFlow.prototype.update = function(options) {\n  Object.assign(this.options, options)\n\n  this.options.resolution = evenNum(this.options.resolution)\n\n  this.drawPixels()\n\n  return this\n}\n\nexport default PixelFlow\n","import PixelFlow from '../../src/pixel-flow.js'\n\nfunction domReady() {\n  return new Promise(resolve => {\n    if (\n      document.readyState === 'interactive' ||\n      document.readystate === 'completed'\n    ) {\n      Promise.resolve().then(resolve)\n    } else {\n      document.addEventListener('DOMContentLoaded', () => resolve())\n    }\n  })\n}\n\nfunction waitForImage(img) {\n  return new Promise(function(resolve, reject) {\n    var imgObj = new Image()\n    imgObj.onload = function() {\n      resolve(img)\n    }\n    imgObj.onerror = function() {\n      reject()\n    }\n    imgObj.src = img.src\n  })\n}\n\nfunction runAnimation(tick, duration) {\n  duration = duration * 1000\n  const start = Date.now()\n  function ticker() {\n    const now = Date.now()\n    const completionRatio = (now - start) / duration\n    if (completionRatio >= 1) {\n      tick(1)\n    } else {\n      tick(completionRatio)\n      window.requestAnimationFrame(ticker)\n    }\n  }\n  window.requestAnimationFrame(ticker)\n}\n\nfunction easeOutQuad(t) {\n  return t * (2 - t)\n}\n\nfunction easeInOutQuad(ratio) {\n  return ratio < 0.5 ? 2 * ratio * ratio : -1 + (4 - 2 * ratio) * ratio\n}\n\nfunction runGradientAnimation(pixelFlow, options) {\n  const startOffsetX = pixelFlow.width\n  runAnimation(ratioComplete => {\n    const offsetX = Math.round(\n      startOffsetX - startOffsetX * easeOutQuad(ratioComplete)\n    )\n    pixelFlow.linearGradient(Object.assign({ offsetX }, options))\n  }, 2)\n}\n\n// runs across to right, then back left\nfunction runWaveAnimation(pixelFlow, [optionsLeft, optionsRight]) {\n  const width = pixelFlow.width\n  runAnimation(ratioComplete => {\n    const offsetMultiplier = -easeInOutQuad(Math.abs(ratioComplete - 0.5) * 2)\n    const offsetX = Math.round(width * offsetMultiplier)\n    pixelFlow.linearGradient(Object.assign({ offsetX }, optionsLeft))\n    pixelFlow.linearGradient(Object.assign({ offsetX }, optionsRight))\n  }, 4)\n}\n\n!(function() {\n  let pixelFlows\n  var transformOptions = [\n    {\n      linearGradient: { location: [0, 0, 0.65, 1], resolution: [32, 0] },\n      drawPixels: { resolution: 16, offsetY: 6 },\n      lg: { location: [-1, 0, 0.65, 1] },\n      wg: [\n        { location: [0.85, 0.9, 1, 1], resolution: [16, 0] },\n        { location: [0.7, 0.7, 0.85, 0.85], resolution: [0, 16], rebase: false }\n      ]\n    },\n    {\n      linearGradient: { location: [0, 0.1, 0.5, 1], resolution: [32, 0] },\n      drawPixels: { resolution: 8 },\n      lg: { location: [-1, 0.1, 0.45, 1] },\n      wg: [\n        { location: [0.85, 0.9, 1, 1], resolution: [16, 0] },\n        { location: [0.7, 0.7, 0.85, 0.85], resolution: [0, 16], rebase: false }\n      ]\n    },\n    {\n      linearGradient: { location: [0, 0, 0.48, 1], resolution: [32, 0] },\n      drawPixels: { resolution: 6 },\n      lg: { location: [-1, 0, 0.48, 1] },\n      wg: [\n        { location: [0.85, 0.9, 1, 1], resolution: [16, 0] },\n        { location: [0.7, 0.7, 0.85, 0.85], resolution: [0, 16], rebase: false }\n      ]\n    },\n    {\n      linearGradient: { location: [0, 0.5, 0.9, 1], resolution: [0, 32] },\n      drawPixels: { resolution: 32 },\n      lg: { location: [0, 0.5, 0.9, 1], resolution: [0, 32] },\n      wg: [\n        { location: [0.85, 0.9, 1, 1], resolution: [16, 0] },\n        { location: [0.7, 0.7, 0.85, 0.85], resolution: [0, 16], rebase: false }\n      ]\n    }\n  ]\n\n  function buttonListener(index) {\n    return event => {\n      const button = event.target\n      const pixelFlow = pixelFlows[index]\n      const requestedTransform = button.dataset.func\n\n      if (requestedTransform === 'animateGradient') {\n        runGradientAnimation(pixelFlow, transformOptions[index].lg)\n      } else if (requestedTransform === 'animateGradient_wave') {\n        runWaveAnimation(pixelFlow, transformOptions[index].wg)\n      } else {\n        pixelFlow[requestedTransform](\n          Object.assign(\n            { offsetX: 0 },\n            transformOptions[index][requestedTransform] || {}\n          )\n        )\n      }\n    }\n  }\n\n  domReady()\n    .then(() => {\n      let images = Array.from(document.querySelectorAll('.img-wrapper img'))\n      return Promise.all(images.map(waitForImage))\n    })\n    .then(images => {\n      pixelFlows = images.map(img => new PixelFlow(img, { resolution: 32 }))\n\n      const imageWrappers = Array.from(\n        document.querySelectorAll('.img-wrapper')\n      )\n      for (let i = 0; i < pixelFlows.length; i++) {\n        const pixelFlow = pixelFlows[i]\n        const imgWrap = imageWrappers[i]\n        const buttons = Array.from(imgWrap.getElementsByTagName('button'))\n        buttons.forEach(b =>\n          b.addEventListener('click', buttonListener(i), false)\n        )\n      }\n    })\n})()\n"]}